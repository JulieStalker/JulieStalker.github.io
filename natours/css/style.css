/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

universal reset - no margins or heading
*/
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box; /*so boders and paddings are no longer added */
}
html {
    font-size: 10px;
}
/* basic reset will be inherited   1.7 times bigger
all child elements of body will inherit
*/
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 1.6rem;
    line-height: 1.7;
    color: #777; /* whatever width of always try to fit element inside of box */
    padding: 3rem; /* white border around entire web page */
}

/* 95% of viewport  cover is width of viewport will try fit element within box
top dont crop out when resize
have to use rgb for opacity
*/
.header {
    height: 95vh; 
    background-image: linear-gradient(to right bottom, 
        rgba(126, 213, 111, 0.8), /* opacity .8 can use colorpicker to see it*/
        rgba(40, 180, 133, 0.8)), 
        url(../img/hero.jpg);
    background-size: cover;
    background-position: top; /* always stay at top of the crops bottom */
    position: relative;
    clip-path: polygon(	0 0, 100% 0, 100% 75vh, 0 100%);  /* vh viewport height */
    /*4 corners x y, x y , define polygon
    left to right is X    up down y
    clockwise from top left 
    0 0 no change top left  corner, 100% across top left right  0 no change
    3rd coor is bottom right corner  - 100% in x  but  y change
     of what want to show clockwiswe from top-left
     arrow https://bennettfeely.com/clippy/        can use px */
    /* clip-path: polygon(0% 20%, 60% 20%, 60% 0%, 100% 50%, 60% 100%, 60% 80%, 0% 80%);  */
}
.logo-box {
    position: absolute;
    top: 4rem; /* have to set parent, ie header to relative*/
    left: 4rem;
}
.logo {
    height: 3.5rem;
    /* backface-visibility: hidden;  */
}
.logo:hover {
    height: 3.5rem;
    /* animation: moveInRight 1s ease-out; */
}
.text-box {
    position: absolute;
    top: 40%; /* of parent element as cut out makes it look further down*/ 
    left: 50%;
    transform: translate(-50%, -50%); /*on x y 50% of element (not parent) ie box size so in actual center*/    
    text-align: center;
}
.heading-primary {
    color: #fff;
    text-transform: uppercase;
    backface-visibility: hidden; /* prevent it from jumping up which animations do  */
    margin-bottom: 6rem; 
}
.heading-primary-main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 5s;
}
.heading-primary-sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out;
}
/* Code animation */
@keyframes moveInLeft {
    0% { /*start y top to bottom  x left to right*/
        opacity: 0;
        transform: translateX(-10rem); /* rotate(-50deg); */
    }
    /* 60% {
        transform: rotate(120deg);
    } */
    80% { /* bounce in opp direction */
        transform: translateX(1rem);
    }
    /* end */
    100% {
        opacity: 1;
        transform: translate(0);
    }

}
/* animation for subheader */
@keyframes moveInRight{
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }
    80% {
        transform: translateX(-1rem);
    }
    100% {/* end */
        opacity: 1;
        transform: translate(0);
    }
}
.btn, .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block; /* if want padding or height so box model else overlaps h1 above with padding  */
    border-radius: 10rem; /* rounds corners */
    transition: all .2s; /* has to be on initial state then on hover add */
    position: relative; /* need this so hidden after btn can be absolute*/
}  
/* 2 types of animations 
1. transition property (simple) 
2. complex to use steps with keyframes@ rule */
@keyframes moveInBottom{
    /* move button in from bottom so Y*/
    0% {
        opacity: 0;
        transform: translateY(30rem); 
        /*top to bottom so positive is down */
    }
    
    100% {/* end */
        opacity: 1;
        transform: translate(0);
    }
}

.btn:hover{
    /* moveup ; */
    transform: translateY(-.3rem); /*up is neg on y axis */
    box-shadow: 0 1rem 2rem rgb(0,0,0, .2);
    /* x y blur(looks farther away) rgb(black with 20% opacity 
    not in x direction so 0 
    */
}
btn:active { /*click is active */
    transform: translateY(-.1rem); /*goes down on click */
    /* when click on button want it to look smaller impression that it is closer
    so decrease shadow and blur */
    box-shadow: 0 .5rem 1rem rgb(0,0,0, .2);
}
.btn-white {
    background-color: #fff;
    color: #777;    
}
.btn::after {
    /* white part that zooms out to infinity when we hover
    so add hidden virtual pseudo-element  looks like btn there
    when hover out goes back behind element*/
    content: ""; /*have to have */
    display: inline-block; /*have to have */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position:absolute; /*has to have reference of button which set to relative */
    top:0;
    left:0;
    z-index: -1; /* so behind button*/ 
    /*initial state animation*/
    transition: all .4s;
}
.btn-white::after {
    background-color: #fff;
}
.btn:hover::after {
    /* show here */
    transform: scaleX(1.4) scaleY(1.6);/*scale(1.5); */
    opacity: 0; /* fades out */
}
.btn-animated{
    /* anim name duration timing-function  delay*/
    animation: moveInBottom .5s ease-out .75s;
    animation-fill-mode: backwards; /* auto apply styles up to 0% before animation starts 
    so opacity 0 as per 0% */
}